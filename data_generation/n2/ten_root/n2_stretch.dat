import sys
sys.path.insert(0, '../../../')

# importing general packages
import numpy as np
import spinflip
from spinflip import sf_cas

init_c = 0
init_m = 7
charge = 1
multiplicity = 2
cf = ""
out = open('%i_%i-to-%i_%i_%s.out' % (init_c, init_m, charge, multiplicity, cf), 'w')
out.write("CAS-SF(%s) CALCULATION: %i %i -> %i %i\n" %(cf, init_c, init_m, charge, multiplicity))
out.write("BL\tε_HOMO\t\tε_LUMO\t\tROHF\t\tCAS-SF ROOTS\n")

start = 1.5
diff = 0.01
stop = 0.5
#stop = 0.5
firstIterDone = False
# loop over all bond lengths
bondlength = start
while(bondlength > stop):
    # setting up molecule
    n2 = psi4.geometry("""
      %i %i
      N
      N 1 R
      R = %6.6f
      symmetry c1
    """ % (init_c, init_m, bondlength))
    # running the spin-flip calculation
    #opts = {'basis': 'cc-pvdz', 'num_roots': 15}
    opts = {'basis': 'cc-pvdz', 'num_roots': 6, 'soscf': True, 'calc_s_squared': True, 's': 0.5}
    # do sf calculation
    if(firstIterDone):
        set_options(opts)
        opts.update({'guess': 'read'})
        e_cas, wfn_scf, e_scf = sf_cas( charge, multiplicity, n2, conf_space=cf, add_opts=opts, return_rohf_wfn=True, return_rohf_e=True )
    else:
        set_options(opts)
        e_cas, wfn_scf, e_scf = sf_cas( charge, multiplicity, n2, conf_space=cf, add_opts=opts, return_rohf_wfn=True, return_rohf_e=True )
        firstIterDone = True
    # find all roots
    root_0 = psi4.get_variable('CI ROOT 0 TOTAL ENERGY')
    root_1 = psi4.get_variable('CI ROOT 1 TOTAL ENERGY')
    root_2 = psi4.get_variable('CI ROOT 2 TOTAL ENERGY')
    root_3 = psi4.get_variable('CI ROOT 3 TOTAL ENERGY')
    root_4 = psi4.get_variable('CI ROOT 4 TOTAL ENERGY')
    root_5 = psi4.get_variable('CI ROOT 5 TOTAL ENERGY')
    root_6 = psi4.get_variable('CI ROOT 6 TOTAL ENERGY')
    root_7 = psi4.get_variable('CI ROOT 7 TOTAL ENERGY')
    root_8 = psi4.get_variable('CI ROOT 8 TOTAL ENERGY')
    root_9 = psi4.get_variable('CI ROOT 9 TOTAL ENERGY')
    root_10 = psi4.get_variable('CI ROOT 10 TOTAL ENERGY')
    root_11 = psi4.get_variable('CI ROOT 11 TOTAL ENERGY')
    root_12 = psi4.get_variable('CI ROOT 12 TOTAL ENERGY')
    root_13 = psi4.get_variable('CI ROOT 13 TOTAL ENERGY')
    root_14 = psi4.get_variable('CI ROOT 14 TOTAL ENERGY')
    root_15 = psi4.get_variable('CI ROOT 15 TOTAL ENERGY')
    root_16 = psi4.get_variable('CI ROOT 16 TOTAL ENERGY')
    root_17 = psi4.get_variable('CI ROOT 17 TOTAL ENERGY')
    root_18 = psi4.get_variable('CI ROOT 18 TOTAL ENERGY')
    root_19 = psi4.get_variable('CI ROOT 19 TOTAL ENERGY')
    # get mulliken charges
    psi4.oeprop(wfn_scf, "MULLIKEN_CHARGES")
    # get homo/lumo
    e_homo = wfn_scf.epsilon_a().get(9)
    e_lumo = wfn_scf.epsilon_a().get(10)
    # write to output
    out.write("%3.3f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\t%6.10f\n" %(bondlength, e_homo, e_lumo, e_scf, root_0, root_1, root_2, root_3, root_4, root_5, root_6, root_7, root_8, root_9, root_10, root_11, root_12, root_13, root_14, root_15, root_16, root_17, root_18, root_19))
    bondlength = bondlength - diff
    out.close()
    exit()

out.close()

